#!/usr/bin/env @PYTHON_BIN@
# For license: see LICENSE file at top-level

import signal
import os
import sys
import re
from distutils.spawn import find_executable

#
# try to highlight debugging output, don't worry if we can't
#
try:
    from colorama import Style
    do_effect = sys.stdout.isatty()
except ImportError:
    do_effect = False
    pass

#
# -- defaults --------------------------------------------------------
#

PRTE_LAUNCHER  = "prterun"
PRTE_ARGS      = "--personality shmem"
MPI_LAUNCHER   = "mpiexec"

ENV_LAUNCH_VAR = "SHMEM_LAUNCHER"

debugging      = False
launcher       = None

try:
    width, _ = os.get_terminal_size()
except:
    width = 80                  # default terminal cols

width = width - 10              # but leave some space

if width < 10:
    width = 10

#
# -- debug and error--------------------------------------------------
#
def debug(cat, *args):
    if debugging:
        msg = progname + ":"
        if cat != None:
            msg += cat + ":"
        msg += ' '.join(map(str, args))
        if do_effect:
            msg = Style.BRIGHT + msg + Style.RESET_ALL
        msg += "\n"
        sys.stdout.write(msg)

#
# crash out on error
#
def bail(*args):
    err = progname + ": ERROR:" + \
        ' '.join(map(str, args)) + \
        "\n"
    sys.stderr.write(err)
    sys.exit(1)

#
# -- main ------------------------------------------------------------
#

#
# -- trap signals ----------------------------------------------------
#
def trap_out(signo, frame):
    sys.exit(0)

signal.signal(signal.SIGINT, trap_out)
signal.signal(signal.SIGQUIT, trap_out)

#
# set up basic environment
#
progname = os.path.basename(sys.argv[0])

de = os.getenv("OSHRUN_DEBUG")
if de != None:
    if not re.match('^[n0]', de, re.IGNORECASE):
        debugging = True

debug(None, "== OSSS-UCX Launcher ==")

#
# off we go
#
debug("init", "looking for launcher")

launcher = os.getenv(ENV_LAUNCH_VAR)
if launcher != None:
    if not find_executable(launcher):
        bail("can't find launcher \"{0}\" in ".format(launcher) + \
             "environment variable \"{0}\"".format(ENV_LAUNCH_VAR))
else:
    launcher = "@SHMEM_LAUNCHER@" # override from configure?

if launcher == "":
    debug("init", "checking for PRTE...")
    if find_executable(PRTE_LAUNCHER) != None:
        launcher = PRTE_LAUNCHER + " " + PRTE_ARGS
        debug("config", "using PRTE ({0})".format(PRTE_LAUNCHER))
    else:
        debug("init", "checking for MPI...")
        if find_executable(MPI_LAUNCHER):
            launcher = MPI_LAUNCHER
            debug("config", "using MPI ({0})".format(MPI_LAUNCHER))
        else:
            bail("can't find a launcher")

#
# pull in what user wants to run
#
user_cmd = ' '.join(map(str, sys.argv[1:]))

#
# full command to run
#
cmd = launcher + ' ' + user_cmd

debug("run", "calling \"{0}\"".format(cmd))
debug(None, '-' * width)

os.system(cmd)
